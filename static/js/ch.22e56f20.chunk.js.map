{"version":3,"sources":["components/game/team/championship/Top.js","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","components/game/team/championship/ListItem.js","components/ChampionshipsList.js"],"names":["title","navigate","useNavigate","IconButton","color","onClick","Icon","ListItemIcon","React","props","ref","classes","className","other","_objectWithoutProperties","context","ListContext","_extends","clsx","root","alignItems","alignItemsFlexStart","withStyles","theme","minWidth","palette","action","active","flexShrink","display","marginTop","name","roundKey","gameKey","useParams","t","useTranslation","playedAt","Date","parseInt","ListItem","button","ListItemText","date","toDateString","time","toLocaleTimeString","index","gameName","teams","useGame","championships","teamName","List","component","map","championship","key","PageViewTracker"],"mappings":"8NAUe,IAAGA,YAChB,MAAMC,EAAWC,cAGjB,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAJf,IAAMJ,GAAU,IAK3B,kBAACK,EAAA,EAAD,oBAEF,kBAAC,IAAD,KAAWN,GACX,kBAAC,IAAD,MACA,kBAAC,IAAD,Q,4DCMFO,EAA4BC,cAAiB,SAAsBC,EAAOC,GAC5E,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAQC,YAAyBL,EAAO,CAAC,UAAW,cAEpDM,EAAUP,aAAiBQ,KAC/B,OAAoBR,gBAAoB,MAAOS,YAAS,CACtDL,UAAWM,YAAKP,EAAQQ,KAAMP,EAAkC,eAAvBG,EAAQK,YAA+BT,EAAQU,qBACxFX,IAAKA,GACJG,OAyBUS,eAtDK,SAAgBC,GAClC,MAAO,CAELJ,KAAM,CACJK,SAAU,GACVpB,MAAOmB,EAAME,QAAQC,OAAOC,OAC5BC,WAAY,EACZC,QAAS,eAIXR,oBAAqB,CACnBS,UAAW,MA0CiB,CAChCC,KAAM,mBADOT,CAEZf,G,SCvDY,IAAGyB,eAChB,MAAM,QAAEC,GAAYC,cACdjC,EAAWC,eACViC,GAAKC,cAENC,EAAW,IAAIC,KAAKC,SAASP,EAAU,KAE7C,OACE,kBAACQ,EAAA,EAAD,CAAUC,QAAM,EAACpC,QAJM,IAAMJ,EAAS,UAAD,OAAWgC,EAAX,mBAA6BD,KAKhE,kBAAC,EAAD,KACE,kBAAC1B,EAAA,EAAD,CAAMF,MAAM,WAAZ,SAEF,kBAACsC,EAAA,EAAD,KACGP,EAAE,oBAAqB,CAAEQ,KAAMN,EAASO,eAAgBC,KAAMR,EAASS,0BCVjE,eACb,MAAM,MAAEC,GAAUb,eACVH,KAAMiB,EAAR,MAAkBC,GAAUC,eAC5B,cAAEC,EAAepB,KAAMqB,GAAaH,EAAMF,GAChD,OACE,oCACE,kBAAC,EAAD,CAAiB/C,MAAK,UAAKgD,EAAL,cAAmBI,KACzC,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,OACbH,EAAcI,IAAKC,GAClB,kBAAC,EAAD,CAA2BC,IAAKD,EAAcxB,SAAUwB,OAI9D,kBAACE,EAAA,EAAD","file":"static/js/ch.22e56f20.chunk.js","sourcesContent":["import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport IconButton from '@material-ui/core/IconButton'\nimport Icon from '@material-ui/core/Icon'\n\nimport BarToolbar from 'common/bar/Toolbar'\nimport BarTitle from 'common/bar/Title'\nimport LocaleMenu from 'components/locale/Menu'\nimport ThemeMenu from 'components/theme/Menu'\n\nexport default ({ title }) => {\n  const navigate = useNavigate()\n  const goToGame = () => navigate(-1)\n\n  return (\n    <BarToolbar>\n      <IconButton color=\"inherit\" onClick={goToGame}>\n        <Icon>arrow_back</Icon>\n      </IconButton>\n      <BarTitle>{title}</BarTitle>\n      <LocaleMenu />\n      <ThemeMenu />\n    </BarToolbar>\n  )\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Icon from '@material-ui/core/Icon'\n\nexport default ({ roundKey }) => {\n  const { gameKey } = useParams()\n  const navigate = useNavigate()\n  const [t] = useTranslation()\n  const goToChampionship = () => navigate(`/games/${gameKey}/rounds/${roundKey}`)\n  const playedAt = new Date(parseInt(roundKey, 36))\n\n  return (\n    <ListItem button onClick={goToChampionship}>\n      <ListItemIcon>\n        <Icon color=\"primary\">star</Icon>\n      </ListItemIcon>\n      <ListItemText>\n        {t('messages.playedAt', { date: playedAt.toDateString(), time: playedAt.toLocaleTimeString() })}\n      </ListItemText>\n    </ListItem>\n  )\n}\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport List from '@material-ui/core/List'\n\nimport GameGuard from './game/Guard'\n\nimport useGame from './game/useGame'\nimport PageViewTracker from './PageViewTracker'\nimport ChampionshipTop from './game/team/championship/Top'\nimport TeamChampionshipsListItem from './game/team/championship/ListItem'\n\nexport default () => {\n  const { index } = useParams()\n  const { name: gameName, teams } = useGame()\n  const { championships, name: teamName } = teams[index]\n  return (\n    <>\n      <ChampionshipTop title={`${gameName} - ${teamName}`} />\n      <GameGuard>\n        <List component=\"div\">\n          {championships.map((championship) => (\n            <TeamChampionshipsListItem key={championship} roundKey={championship} />\n        ))}\n        </List>\n      </GameGuard>\n      <PageViewTracker />\n    </>\n  )\n}\n"],"sourceRoot":""}